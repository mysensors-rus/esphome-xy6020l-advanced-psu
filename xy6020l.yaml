substitutions:
  devicename: xy6020
  friendly_name: xy6020
  device_description: XY6020 блок питания
  tx_pin: GPIO11
  rx_pin: GPIO10

esphome:
  name: $devicename
  comment: ${device_description}
  friendly_name: $friendly_name
  platformio_options:
    board_build.f_cpu: 240000000L
  project:
    name: "esphome.xy6020l-modbus"
    version: "1.0.0"

esp32:
  board: lolin_s2_mini
  variant: ESP32S2
  framework:
    type: esp-idf

captive_portal:
web_server:
  port: 80

wifi:
  fast_connect: true
  enable_on_boot: true
  ssid: !secret WIFI_ssid2
  password: !secret WIFI_Password2
  id: wifi_id
  manual_ip:
    static_ip: !secret static_ip_xy2060l
    gateway: !secret gateway_ip_xy2060l
    subnet: !secret subnet
  ap:
    ssid: $devicename
    password: !secret ap_password

uart:
  id: uart_0
  baud_rate: 115200
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}

modbus:
  id: modbus0
  uart_id: uart_0
  send_wait_time: 50ms

modbus_controller:
  - id: xy_hub
    address: 1
    modbus_id: modbus0
    command_throttle: 200ms
    update_interval: 2s

sensor:
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: input_voltage
    name: "${devicename} Input Voltage"
    register_type: holding
    address: 5
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_voltage
    name: "${devicename} Output Voltage"
    register_type: holding
    address: 2
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: input_current
    name: "${devicename} Input Current"
    register_type: holding
    address: 6
    value_type: U_WORD
    unit_of_measurement: "A"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_current
    name: "${devicename} Output Current"
    register_type: holding
    address: 3
    value_type: U_WORD
    unit_of_measurement: "A"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: input_power
    name: "${devicename} Input Power"
    register_type: holding
    address: 7
    value_type: U_WORD
    unit_of_measurement: "W"
    accuracy_decimals: 0
    filters:
      - multiply: 1
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_power
    name: "${devicename} Output Power"
    register_type: holding
    address: 4
    value_type: U_WORD
    unit_of_measurement: "W"
    accuracy_decimals: 0
    filters:
      - multiply: 1
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: temperature
    name: "${devicename} Temperature"
    register_type: holding
    address: 13
    value_type: U_WORD
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    register_count: 1
    filters:
      - multiply: 0.1

  # Счетчики энергии (READ-ONLY, адреса 8-11) - 32-bit
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_ah_low
    name: "${devicename} Output Ah (Low)"
    register_type: holding
    address: 8  # AH-LOW (Read-only)
    value_type: U_WORD
    unit_of_measurement: "mAh"
    accuracy_decimals: 0
    internal: true
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_ah_high
    name: "${devicename} Output Ah (High)"
    register_type: holding
    address: 9  # AH-HIGH (Read-only)
    value_type: U_WORD
    unit_of_measurement: "mAh"
    accuracy_decimals: 0
    internal: true
    register_count: 1

  - platform: template
    name: "${devicename} Output Ah"
    unit_of_measurement: "Ah"
    accuracy_decimals: 3
    lambda: |-
      uint32_t value = ((uint32_t)id(output_ah_high).state * 65536) + (uint32_t)id(output_ah_low).state;
      return value / 1000.0;
    update_interval: 5s

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_wh_low
    name: "${devicename} Output Wh (Low)"
    register_type: holding
    address: 10  # WH-LOW (Read-only)
    value_type: U_WORD
    unit_of_measurement: "10mWh"
    accuracy_decimals: 0
    internal: true
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_wh_high
    name: "${devicename} Output Wh (High)"
    register_type: holding
    address: 11  # WH-HIGH (Read-only)
    value_type: U_WORD
    unit_of_measurement: "10mWh"
    accuracy_decimals: 0
    internal: true
    register_count: 1

  - platform: template
    name: "${devicename} Output Wh"
    unit_of_measurement: "Wh"
    accuracy_decimals: 2
    lambda: |-
      uint32_t value = ((uint32_t)id(output_wh_high).state * 65536) + (uint32_t)id(output_wh_low).state;
      return (value * 10.0) / 1000.0;
    update_interval: 5s

  # Чтение установленных защит S-OAH (регистры 88-89) - 32-bit
  # LCD работает в диапазоне 0-99.99 Ah (делитель 100)
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: read_oah_low
    name: "${devicename} S-OAH Low"
    register_type: holding
    address: 88  # S-OAH_L
    value_type: U_WORD
    internal: true
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: read_oah_high
    name: "${devicename} S-OAH High"
    register_type: holding
    address: 89  # S-OAH_H
    value_type: U_WORD
    internal: true
    register_count: 1

  - platform: template
    id: current_oah_setting
    name: "${devicename} Current Max Charge Setting"
    unit_of_measurement: "Ah"
    accuracy_decimals: 2
    lambda: |-
      uint32_t value = ((uint32_t)id(read_oah_high).state * 65536) + (uint32_t)id(read_oah_low).state;
      return value / 100.0;  // Делитель 100 для диапазона 0-99.99
    update_interval: 5s
    on_value:
      then:
        - lambda: |-
            // Обновляем number только если значение изменилось
            if (id(set_oah).state != x) {
              auto call = id(set_oah).make_call();
              call.set_value(x);
              call.perform();
            }

  # Чтение установленных защит S-OWH (регистры 90-91) - 32-bit
  # LCD работает в диапазоне 0-99.99 Wh (делитель 100)
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: read_owh_low
    name: "${devicename} S-OWH Low"
    register_type: holding
    address: 90  # S-OWH_L
    value_type: U_WORD
    internal: true
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: read_owh_high
    name: "${devicename} S-OWH High"
    register_type: holding
    address: 91  # S-OWH_H
    value_type: U_WORD
    internal: true
    register_count: 1

  - platform: template
    id: current_owh_setting
    name: "${devicename} Current Max Energy Setting"
    unit_of_measurement: "Wh"
    accuracy_decimals: 1
    lambda: |-
      uint32_t value = ((uint32_t)id(read_owh_high).state * 65536) + (uint32_t)id(read_owh_low).state;
      return value / 10.0;  // Делитель 10 для диапазона 0-999.9
    update_interval: 5s
    on_value:
      then:
        - lambda: |-
            // Обновляем number только если значение изменилось
            if (id(set_owh).state != x) {
              auto call = id(set_owh).make_call();
              call.set_value(x);
              call.perform();
            }

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_time_hours
    name: "${devicename} Output Time Hours"
    register_type: holding
    address: 19
    value_type: U_WORD
    unit_of_measurement: "h"
    accuracy_decimals: 0
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_time_minutes
    name: "${devicename} Output Time Minutes"
    register_type: holding
    address: 20
    value_type: U_WORD
    unit_of_measurement: "min"
    accuracy_decimals: 0
    register_count: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_time_seconds
    name: "${devicename} Output Time Seconds"
    register_type: holding
    address: 21
    value_type: U_WORD
    unit_of_measurement: "s"
    accuracy_decimals: 0
    register_count: 1

  - platform: wifi_signal
    name: ${friendly_name}_wifi_signal
    update_interval: 60s
    id: wifi_signal_id

number:
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_output_voltage
    name: "${devicename} Set Output Voltage"
    min_value: 0
    max_value: 60
    step: 0.01
    unit_of_measurement: "V"
    address: 0
    value_type: U_WORD
    multiply: 100

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_output_current
    name: "${devicename} Set Output Current"
    min_value: 0
    max_value: 20
    step: 0.01
    unit_of_measurement: "A"
    address: 1
    value_type: U_WORD
    multiply: 100

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_output_power
    name: "${devicename} Set Output Power"
    min_value: 0
    max_value: 1200
    step: 1
    unit_of_measurement: "W"
    address: 30
    value_type: U_WORD
    multiply: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_input_uvp
    name: "${devicename} Set Input UVP (Min Voltage)"
    min_value: 4.8
    max_value: 71
    step: 0.01
    unit_of_measurement: "V"
    icon: "mdi:arrow-collapse-down"
    address: 82
    value_type: U_WORD
    multiply: 100

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_input_icp
    name: "${devicename} Set Max Input Current"
    min_value: 0
    max_value: 25
    step: 0.01
    unit_of_measurement: "A"
    icon: "mdi:current-ac"
    address: 84
    value_type: U_WORD
    multiply: 100

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_output_ovp
    name: "${devicename} Set Output OVP (Max Voltage)"
    min_value: 0
    max_value: 65
    step: 0.01
    unit_of_measurement: "V"
    icon: "mdi:arrow-collapse-up"
    address: 83
    value_type: U_WORD
    multiply: 100

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_output_ocp
    name: "${devicename} Set Output OCP (Max Current)"
    min_value: 0
    max_value: 22
    step: 0.01
    unit_of_measurement: "A"
    icon: "mdi:current-dc"
    address: 84
    value_type: U_WORD
    multiply: 100

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_output_opp
    name: "${devicename} Set Output OPP (Max Power)"
    min_value: 0
    max_value: 1300
    step: 1
    unit_of_measurement: "W"
    icon: "mdi:flash"
    address: 85
    value_type: U_WORD
    multiply: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_max_temperature
    name: "${devicename} Set Max Temperature (OTP)"
    min_value: 60
    max_value: 110
    step: 1
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-alert"
    address: 92
    value_type: U_WORD
    multiply: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_ohp_hours
    name: "${devicename} Set OHP Hours (Max Time)"
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "h"
    icon: "mdi:clock-alert"
    address: 86
    value_type: U_WORD
    multiply: 1

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: set_ohp_minutes
    name: "${devicename} Set OHP Minutes (Max Time)"
    min_value: 0
    max_value: 59
    step: 1
    unit_of_measurement: "min"
    icon: "mdi:clock-alert"
    address: 87
    value_type: U_WORD
    multiply: 1

  # Защита по энергии (OAH) - 32-bit регистры 88-89
  # Диапазон LCD: 0-99.99 Ah, делитель 100
  - platform: template
    id: set_oah
    name: "${devicename} Set Max Charge (Ah)"
    min_value: 0
    max_value: 99.99
    step: 0.01
    unit_of_measurement: "Ah"
    icon: "mdi:battery-charging-100"
    optimistic: true
    set_action:
      - lambda: |-
          uint32_t value = (uint32_t)(x * 100);  // 60.05 -> 6005
          uint16_t low = value & 0xFFFF;
          uint16_t high = (value >> 16) & 0xFFFF;
          
          ESP_LOGD("set_oah", "Setting %.2f Ah = %u (low=%u, high=%u)", x, value, low, high);
          
          esphome::modbus_controller::ModbusController *controller = id(xy_hub);
          std::vector<uint16_t> data = {low, high};
          esphome::modbus_controller::ModbusCommandItem write_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(
              controller, 88, 2, data);
          controller->queue_command(write_cmd);

  # Защита по энергии (OWH) - 32-bit регистры 90-91
  # Диапазон LCD: 0-999.9 Wh, делитель 10
  - platform: template
    id: set_owh
    name: "${devicename} Set Max Energy (Wh)"
    min_value: 0
    max_value: 999.9
    step: 0.01
    unit_of_measurement: "Wh"
    icon: "mdi:lightning-bolt"
    optimistic: true
    set_action:
      - lambda: |-
          uint32_t value = (uint32_t)(x * 10);  // 400.4 -> 4004
          uint16_t low = value & 0xFFFF;
          uint16_t high = (value >> 16) & 0xFFFF;
          
          ESP_LOGD("set_owh", "Setting %.1f Wh = %u (low=%u, high=%u)", x, value, low, high);
          
          esphome::modbus_controller::ModbusController *controller = id(xy_hub);
          std::vector<uint16_t> data = {low, high};
          esphome::modbus_controller::ModbusCommandItem write_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(
              controller, 90, 2, data);
          controller->queue_command(write_cmd);

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: protection_register
    name: "${devicename} Protection Register"
    min_value: 0
    max_value: 255
    step: 1
    address: 16
    value_type: U_WORD
    multiply: 1
    internal: true

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_status
    name: "${devicename} Output"
    register_type: holding
    address: 18
    bitmask: 0x1
    device_class: power

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: key_lock
    name: "${devicename} Key Lock"
    register_type: holding
    address: 15
    bitmask: 0x1
    icon: "mdi:lock"

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: constant_current_mode
    name: "${devicename} Constant Current Mode"
    register_type: holding
    address: 17
    bitmask: 0x1
    icon: "mdi:current-dc"

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: over_voltage_protection
    name: "${devicename} Over Voltage Protection"
    register_type: holding
    address: 16
    bitmask: 0x01
    device_class: problem

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: over_current_protection
    name: "${devicename} Over Current Protection"
    register_type: holding
    address: 16
    bitmask: 0x02
    device_class: problem

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: over_power_protection
    name: "${devicename} Over Power Protection"
    register_type: holding
    address: 16
    bitmask: 0x04
    device_class: problem

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: over_temperature_protection
    name: "${devicename} Over Temperature Protection"
    register_type: holding
    address: 16
    bitmask: 0x80
    device_class: problem

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: under_voltage_protection
    name: "${devicename} Under Voltage Protection (LVP)"
    register_type: holding
    address: 16
    bitmask: 0x08
    device_class: problem

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: over_ah_protection
    name: "${devicename} Over Ah Protection (OAH)"
    register_type: holding
    address: 16
    bitmask: 0x10
    device_class: problem

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: over_time_protection
    name: "${devicename} Over Time Protection (OHP)"
    register_type: holding
    address: 16
    bitmask: 0x20
    device_class: problem

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: over_wh_protection
    name: "${devicename} Over Wh Protection (OWH)"
    register_type: holding
    address: 16
    bitmask: 0x40
    device_class: problem

  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: "${devicename} button"
    id: gpio0_id

  - platform: status
    name: "${devicename} API Status"

switch:
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: output_switch
    name: "${devicename} Output Switch"
    register_type: holding
    address: 18
    bitmask: 1
    restore_mode: ALWAYS_OFF

  - platform: modbus_controller
    modbus_controller_id: xy_hub
    id: key_lock_switch
    name: "${devicename} Key Lock Switch"
    register_type: holding
    address: 15
    bitmask: 1
    icon: "mdi:lock"

button:
  - platform: restart
    name: ${friendly_name} Node restart

  - platform: template
    name: "${devicename} Reset Protection"
    icon: "mdi:restart-alert"
    on_press:
      - number.set:
          id: protection_register
          value: 0

  - platform: template
    name: "${devicename} Reset Counters"
    icon: "mdi:counter"
    on_press:
      - lambda: |-
          esphome::modbus_controller::ModbusController *controller = id(xy_hub);
          std::vector<uint16_t> data = {1};
          esphome::modbus_controller::ModbusCommandItem write_cmd = 
            esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(
              controller, 22, 1, data);
          controller->queue_command(write_cmd);

select:
  - platform: modbus_controller
    modbus_controller_id: xy_hub
    name: "${devicename} Load Memory Preset"
    address: 29
    value_type: U_WORD
    optionsmap:
      "M0 (Current)": 0
      "M1": 1
      "M2": 2
      "M3": 3
      "M4": 4
      "M5": 5
      "M6": 6
      "M7": 7
      "M8": 8
      "M9": 9
    icon: "mdi:database"

light:
  - platform: status_led
    name: ${friendly_name} Status LED
    id: esp_status_led
    icon: "mdi:alarm-light"
    restore_mode: ALWAYS_OFF
    pin:
      number: GPIO15
      inverted: false

logger:
  baud_rate: 0
  level: DEBUG
  hardware_uart: UART1

api:
  password: !secret api_password
  reboot_timeout: 0s  

ota:
  - platform: esphome
    password: !secret ota_password